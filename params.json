{"name":"pamatcher","tagline":"A pattern matching library for JavaScript","body":"# pamatcher [![npm version](https://badge.fury.io/js/pamatcher.svg)](http://badge.fury.io/js/pamatcher)\r\n\r\nA pattern matching library for JavaScript.\r\n\r\nIt's like regular expressions but more general. Instead strings, you can use any iterable or iterator as input. Instead of characters you can use any predicate as item matcher. So you can do pattern matching in a general and declarative way.\r\n\r\nTested on node.js 4.1.1.\r\n\r\n## Installation and usage\r\nYou can install pamatcher using npm:\r\n```bash\r\nnpm install pamatcher\r\n```\r\n\r\nIf you want to use pamatcher from browser, you can use [jspm](http://jspm.io/). Here you have a complete pamatcher demo for browser at [gist](https://gist.github.com/pmros/137ecf2351e0f2fe44d4) (or live at [bl.ocks.org](http://bl.ocks.org/pmros/137ecf2351e0f2fe44d4)). You can play online with pamatcher via [jsfiddle](https://jsfiddle.net/8f4mcoq5/).\r\n\r\nThis is an example of use:\r\n\r\n```js\r\nvar pamatcher = require('pamatcher');\r\n\r\nvar matcher = pamatcher(\r\n  (i) => i < 10,\r\n  { repeat: (i) => i%2==0 },\r\n  (i) => i > 10\r\n);\r\n\r\nvar result = matcher.test([1, 4, 8, 44, 55]);\r\nif(result) {\r\n  console.log(\"Pattern matches!\");\r\n} else {\r\n  console.log(\"Pattern doesn't match.\");\r\n}\r\n```\r\n\r\nIn the example, the pattern is simple: match a number lesser than 10, followed by zero o more even numbers and finally a number greater than 10. You test an array and it should print \"Pattern matches!\". See tests for more examples.\r\n\r\n## API\r\n\r\n### pamatcher(expression)\r\n\r\nThis is a function that transforms a pattern expression into a [matcher](#matcher-object). This is the only thing you need to import/require to use pamatcher library.\r\n\r\nA pattern expression is a JavaScript object that specify the pattern you want to use. A pattern expression can be:\r\n\r\n#### [function]\r\nA predicate, that is a function that takes an input item, evaluates it and return a boolean. True means \"item accepted\".\r\n\r\n#### { value: [whatever] }\r\nThis is a shortcut for a (deep) equality predicate.\r\n\r\n#### { sequence: [array of expressions] }\r\nA sequence of expressions.\r\nIt's something like this regex:  /abc/\r\nUsually pamatcher can convert arrays of expressions to a sequence expression for a better readability. Also pamatcher function can automatically convert any number of arguments to a sequence expression (see example above).\r\n\r\n#### { or: [expressions or array of expressions] }\r\nLogical or of multiple expressions.\r\nIt's something like this regex:  /(a|b|c)/\r\n\r\n#### { optional: [expression] }\r\nAn optional expression.\r\nIt's something like this regex:  /a?/\r\n\r\n#### { repeat: [expression] }\r\nA sequence of zero o more expressions repeated.\r\nIt's something like this regex:  /a*/\r\n\r\n### matcher object\r\nA matcher object can check if your expression matches to an input.\r\n\r\n#### matcher.test(input)\r\nThe input is an iterator or an iterable. These are ES6 features. Array, String, Map, Set are iterables.\r\n\r\ntest method returns true if your pattern expression matchs your input, otherwise it returns false.\r\n\r\n\r\n## TODO\r\n- [x] Pattern expressions.\r\n- [x] Browser suport.\r\n- [ ] Cardinality for repeat pattern.\r\n- [ ] Better documentation.\r\n- [ ] More tests.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}